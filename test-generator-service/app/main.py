"""TestGeneratorAgent: plans tests and generates runnable test code."""
from __future__ import annotations

from typing import List

from fastapi import FastAPI
from pydantic import BaseModel

from common.models import CodeSymbol, TestIntent, GeneratedTest, Requirement, BugItem
from common.security import redact_pii, deny_real_phi_in_tests
import os
from pathlib import Path

app = FastAPI()


class PlanTestsRequest(BaseModel):
    symbols: List[CodeSymbol]
    requirements: List[Requirement]
    bugs: List[BugItem]


class GenerateTestRequest(BaseModel):
    intent: TestIntent
    symbol: CodeSymbol | None = None


class TestGeneratorAgent:
    """Generates TestIntent and produces GeneratedTest artifacts.

    Enforces PHI redaction and adds bilingual (English/Hindi) comments.
    """

    def __init__(self, code_model_id: str = "code-bison", text_model_id: str = "text-bison"):
        self.code_model_id = code_model_id
        self.text_model_id = text_model_id
        self.mock = False

    def plan_tests(self, symbols: List[CodeSymbol], requirements: List[Requirement], bugs: List[BugItem]) -> List[TestIntent]:
        intents: List[TestIntent] = []
        # Placeholder: produce one intent per requirement
        for r in requirements:
            intent = TestIntent(requirement_id=r.id, description=r.title)
            intents.append(intent)
        return intents

    def generate_test(self, intent: TestIntent, symbol: CodeSymbol | None = None) -> GeneratedTest:
        # Produce a minimal Python pytest function as a placeholder
        code = f"def test_{intent.id.replace('-', '_')}():\n    # TODO: implement test for {intent.description}\n    assert True\n"
        # Add bilingual comment (English + Hindi placeholder)
        code = "# English: autogenerated test\n# हिंदी: स्वचालित रूप से उत्पन्न परीक्षण\n" + code

        # Redact any detected PII/PHI
        redacted = redact_pii(code)
        # Deny saving/using tests with apparent real PHI
        deny_real_phi_in_tests(redacted)
        # Save to disk for local pytest runs
        out_dir = Path(os.getenv("GENERATED_TEST_DIR", "tests/generated"))
        out_dir.mkdir(parents=True, exist_ok=True)
        fname = out_dir / f"test_{intent.id.replace('-', '_')}.py"
        fname.write_text(redacted, encoding="utf-8")

        # If mock flag is set, return a small set of hardcoded tests with bilingual comments
        if self.mock:
            tests = []
            # create two simple tests
            templates = [
                (
                    f"test_{intent.id.replace('-', '_')}_a.py",
                    "# English: autogenerated test A\n# हिन्दी: यह एक स्वचालित परीक्षण A है\n\n def test_sample_a():\n     assert 1 + 1 == 2\n",
                ),
                (
                    f"test_{intent.id.replace('-', '_')}_b.py",
                    "# English: autogenerated test B\n# हिन्दी: यह एक स्वचालित परीक्षण B है\n\n def test_sample_b():\n     assert 'a'.upper() == 'A'\n",
                ),
            ]
            for fname, body in templates:
                path = out_dir / fname
                redacted = redact_pii(body)
                deny_real_phi_in_tests(redacted)
                path.write_text(redacted, encoding="utf-8")
                tests.append(GeneratedTest(intent_id=intent.id, code=redacted, metadata={"path": str(path)}))
            # Return the first one for compatibility
            return tests[0]

        return GeneratedTest(intent_id=intent.id, code=redacted, metadata={"path": str(fname)})


@app.get("/")
def read_root():
    return {"message": "Test Generator Service is running."}


@app.post("/plan_tests", response_model=List[TestIntent])
def plan_tests_endpoint(request: PlanTestsRequest):
    agent = TestGeneratorAgent()
    return agent.plan_tests(request.symbols, request.requirements, request.bugs)


@app.post("/generate_test", response_model=GeneratedTest)
def generate_test_endpoint(request: GenerateTestRequest):
    agent = TestGeneratorAgent()
    return agent.generate_test(request.intent, request.symbol)
